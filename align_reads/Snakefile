import os
import pandas as pd

configfile: "config/config.yaml"

bowtie2_index = config["bowtie2_index"]
project_name = config["project_name"]
sample_annotation = config['sample_annotation']

# parse sample annotation
annotation = pd.read_table(sample_annotation)
samples = annotation.iloc[:, 0]
fq1s = annotation.iloc[:, 2]
fq2s = annotation.iloc[:, 3]

fq1dict = dict(zip(samples, fq1s))
fq2dict = dict(zip(samples, fq2s))

rawbam_dir = "raw_bam"
bam_dir = "bam"
log_dir = "logs"
stats_dir = "stats"
fq_dir = "fastq"

rule all:
    input:
        os.path.join(bam_dir, "aggregated_mapped_reads.bam"),  
        "trinity_out_dir"

rule bowtie2_map:
    input:
        f1 = lambda wildcards: fq1dict[wildcards.sample],
        f2 = lambda wildcards: fq2dict[wildcards.sample]
    output:
        os.path.join(rawbam_dir, "{sample}.bam")
    log:
        "logs/{sample}_bowtie2.log"
    threads:
        2 
    shell:
        "bowtie2 -p {threads} --no-mixed --no-discordant --sensitive -x {bowtie2_index} \
        -1 {input.f1} -2 {input.f2} 2>{log} | samtools view -Sb - > {output}"
    
rule filter_and_sort_bam:
    input:
        os.path.join(rawbam_dir, "{sample}.bam")
    output:
        os.path.join(bam_dir, "{sample}.sorted.bam")
    log:
        os.path.join(log_dir, "{sample}_filter_and_sort_bam.log")
    threads:
        2
    shell:
        "samtools view -F4 -h {input} | samtools sort -O bam -@ {threads} - > {output}"

rule index_bam:
    input:
        os.path.join(bam_dir, "{sample}.sorted.bam")
    output:
        os.path.join(bam_dir, "{sample}.sorted.bam.bai")
    threads: 2
    shell:
        "samtools index {input}"

rule flagstat:
    input:
        bam=os.path.join(bam_dir, "{sample}.sorted.bam"),
        bai=os.path.join(bam_dir, "{sample}.sorted.bam.bai"),
    output:
        os.path.join(stats_dir, "{sample}.sorted.bam.flagstat")
    threads:
        2
    shell:
        "samtools flagstat -@ {threads} {input.bam} > {output}"

rule aggregate_bam:
    input:
        expand(os.path.join(
                bam_dir,
                "{sample}.sorted.bam"), 
            sample=samples)
    output:
        os.path.join(bam_dir, "aggregated_mapped_reads.bam")
    threads:
        2
    shell:
        "samtools cat --threads {threads} {input} | \
            samtools sort -n > {output}"
        
rule aggregate_fq:
    input:
        os.path.join(bam_dir, "aggregated_mapped_reads.bam")
    output:
        f1 = os.path.join(
             fq_dir, 
             "aggregated_mapped_reads_1.fq.gz"),
        f2 = os.path.join(
             fq_dir,
             "aggregated_mapped_reads_2.fq.gz")
    threads: 2
    shell:
        "samtools fastq --threads {threads} -N \
             -1 {output.f1} -2 {output.f2} {input}"
    
rule run_trinity:
    input:
        f1 = os.path.join(
             fq_dir, 
             "aggregated_mapped_reads_1.fq.gz"),
        f2 = os.path.join(
             fq_dir,
             "aggregated_mapped_reads_2.fq.gz")
    output:
        directory("trinity_out_dir")
    threads: 2
    shell:
        "Trinity --seqType fq \
            --left {input.f1} --right {input.f2} \
            --CPU {threads} --max_memory 10G"

"""
rule coverage:
    input:
        bam="bam/{sample}.sorted.bam",
        bai="bam/{sample}.sorted.bam.bai"
    output:
        "bedcov/{sample}.coverage"
    log:
        os.path.join(log_dir, "{sample}.coverageBed.out")
    shell:
        "coverageBed -a {BEDFILE} -b {input} -counts -F 0.5 2>{log} >{output}"
"""

#!/usr/bin/env python3

"""Extract sequences form BAM files of paired reads into two FASTQ files, and run Trinity"""

import os
import errno
import argparse
import logging
import gzip
from subprocess import call
from tempfile import mkstemp
from hbvseq import hbvseqSettings
from hbvseq.io import createDir

parser = argparse.ArgumentParser(description='Perform de-novo assemly with Triniy with pair-end BAM files')

parser.add_argument('bam', help='BAM files with pair-end reads', nargs="*")
parser.add_argument('--outdir', default='TrinityFromBams_outdir', help='Output directory. Default: TrinityFromBams_outdir')
parser.add_argument('--fq1', default='mergedReads-1.fq.gz', help='Left reads output file')
parser.add_argument('--fq2', default='mergedReads-2.fq.gz', help='Right reads output file')
parser.add_argument('--max_memory', default='16G', help='Max memory use. Default: 16G')
parser.add_argument('--log', dest='loglevel', default='INFO', help='Set log level, DEBUG or INFO (case insensitive)')

opts = parser.parse_args()

## make output directory
createDir(opts.outdir)
fq1 = os.path.join(opts.outdir, opts.fq1)
fq2 = os.path.join(opts.outdir, opts.fq2)

fq1Str = bytearray()
fq2Str = bytearray()

for bam in opts.bam:
    _, nsortFile=mkstemp(suffix='.bam', dir=opts.outdir)
    _, currfq1=mkstemp(suffix='-1.fastq', dir=opts.outdir)
    _, currfq2=mkstemp(suffix='-2.fastq', dir=opts.outdir)

    try:
        sam='{0} sort -n -O bam {1} -o {2}'.format("ml load SAMtools; samtools", bam, nsortFile)
        call(sam, shell=True)
        logging.debug(sam)

        bam2fastq = '{0} -i {1} -fq {2} -fq2 {3}'.format("ml load bedtools; bedtools bamtofastq", nsortFile, currfq1, currfq2)
        call(bam2fastq, shell=True)
        logging.debug(bam2fastq)

        with open(currfq1, 'r') as currfq1Handle:
                fq1Str.extend(map(ord, currfq1Handle.read()))

        with open(currfq2, 'r') as currfq2Handle:
                fq2Str.extend(map(ord, currfq2Handle.read()))
    finally:
         os.remove(nsortFile)
         os.remove(currfq1)
         os.remove(currfq2)


## write output fq.gz files
with gzip.open(fq1, 'wb') as fq1Handle:
    fq1Handle.write(fq1Str)

with gzip.open(fq2, 'wb') as fq2Handle:
    fq2Handle.write(fq2Str)


## run trinity
trinityOutdir = os.path.join(opts.outdir, 'trinity_output_dir')
trinity='{0} --seqType fq --max_memory {1} --left {2} --right {3} --output {4}'.format("ml load Bowtie; ml load SAMtools; /pstore/home/zhangj83/apps/trinity/trinityrnaseq-2.2.0/Trinity", opts.max_memory, fq1, fq2, trinityOutdir)
call(trinity, shell=True)


logging.info('Program exits')

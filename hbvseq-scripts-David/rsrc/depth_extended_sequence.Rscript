#!/usr/bin/env Rscript

suppressMessages(library(ribiosArg))
suppressMessages(library(ribiosUtils))
scriptInit()

usage <- paste("Convert depth output of samtools of extended sequence to depths on original cordinates\n",
               "Usage:", scriptName(), "-infile DepthFile -N ExtLength [-outfile FILE] [-log FILE]",
               "Mandatory options:\n",
               "  -infile: output of 'samtools depth -a'\n",
               "  -N: extended length of the genome\n",
               "Optional:\n",
	       "  -header: If present, the header is present in the infile. 'FALSE' by default\n",
               "  -outfile: Output file in tab-delimited format. By default the results are written in stdout\n",
               "  -log FILE: write log into file. Use '-log -' to write log to the standard output.\n")

##----------------------------------------##
## parse inputs
##----------------------------------------##
argParse("header outfile,1 log,1", "infile N", usage=usage)
logfile <- argGet("log", default=NULL)
registerLog(logfile)

assertFile(infile <- argGet("infile"))
header <- argPresent("header")
N <- as.integer(parseNumVec(argGet("N"), expLen=1L, failVal=NA))
outfile <- argGet("outfile", default="")

if(is.na(N) || N<0)
    qqmsg("N must be a valid positiveinteger", status=1L)

doLog("Read infile")
tbl <- read.table(infile, sep="\t", header=header)
if(!header) 
    colnames(tbl)[1:2] <- c("Sequence", "Position")

recount <- function(tbl, N) {
    isRep <- tbl$Position > max(tbl$Position-N)
    isOri <- tbl$Position <= N
    if(sum(isOri)!=sum(isRep))
        qqmsg("The repeated positions are not all found. Check the integrity of position indices")
    
    repInd <- which(isRep)
    repOriCoord <- repInd-min(repInd)+1
    repOriInd <- match(repOriCoord, tbl$Position[isOri])
    isCount <- 3:ncol(tbl)
    otbl <- tbl
    otbl[repOriInd,isCount] <- otbl[repOriInd,isCount] + otbl[repInd,isCount]
    otbl <- otbl[!isRep,]
    colnames(otbl) <- colnames(tbl)
    return(otbl)
}

doLog("Re-calculate depths")
resTbl <- recount(tbl, N)

doLog("Output results")
write.table(resTbl, file=outfile, quote=FALSE, sep="\t", row.names=FALSE, col.names=header, dec=".")

doLog("Program exists")

#!/usr/bin/env Rscript

suppressMessages(library(ribiosArg))
suppressMessages(library(ribiosUtils))
scriptInit()

usage <- paste("Run 'samtools mpileup' over a list of indexed BAM files to get coverage at each base. It circumvents the limit of samtools (<=1.2) that 'samtools depth' only reports no more than 8000 bases at each position.\n",
               "Usage:", scriptName(), "-infile FILE [-outfile FILE] [-log LOG]\n",
               "Mandatory options:\n",
               "  -infile: Input file with one BAM file each line.\n",
               "Optional parameters\n",
               "  -outfile: Output text file.If missing, stdout is used.\n",
               "  -log FILE: write log into file. Use '-log -' to write log to the standard output.\n")

##----------------------------------------##
## parse input files
##----------------------------------------##
argParse("outfile,1 log,1", "infile", usage=usage)
if(isDebugging()) {
    infile <- "/homebasel/biocomp/zhangj83/projects/2016-11-HBVcapsid/data/extended_bam_list.txt"
} else {
    infile <- argGet("infile")
}
outfile <- argGet("outfile", default=stdout())
logfile <- argGet("log", default=NULL)
registerLog(logfile)

##----------------------------------------##
## library
##----------------------------------------##
libordie(parallel)
libordie(ribiosIO)

##----------------------------------------##
## logic
##----------------------------------------##
read_filepointer_file <- function(file) {
    lines <- readLines(file, skipNul=TRUE)
    lines <- trim(lines)
    lines <- setdiff(lines, "")
    return(lines)
}

countDepth <- function(file) {
    samComm <- "samtools mpileup -d 1000000 %s %s"
    sam1 <- tryCatch(system(sprintf(samComm, file, "| cut -f 1,2,4"), intern=TRUE),
                     error=function(e) {
                         qqmsg(e, status=1L)
                     })
    sam1Tbl <- read.table(textConnection(sam1), col.names=c("Chromosome", "Position", "Count"))
    return(sam1Tbl)
}
combineCountDepthTbls <- function(tbls) {
    chrome <- unique(setdiff(unlist(sapply(tbls, function(x) as.character(unique(x[,1])))), character(0)))
    if(length(chrome)>1)
        stop("More than one chromosomes detected:", paste(chrome, collapse=","))
    else if(length(chrome)==0)
        stop("No chromosome found")
    posRange <- range(unlist(sapply(tbls, function(x) x[,2])))
    pos <- posRange[1]:posRange[2]
    countTbl <- sapply(tbls, function(x) matchColumn(pos, x, 2L)[,3L])
    countTbl[is.na(countTbl)] <- 0L
    res <- cbind(Chromosome=chrome,
                 Position=pos,
                 data.frame(countTbl))
    rownames(res) <- pos
    return(res)
}

parseBamFiles <- function(files, mc.cores=8L) {
    tbls <- mclapply(files, countDepth, mc.cores=mc.cores)
    df <- combineCountDepthTbls(tbls)
    colnames(df) <- c("Chromosome", "Position", basename(files))
    return(df)
}

bamfiles <- read_filepointer_file(infile)
depthMat <- parseBamFiles(bamfiles)
writeMatrix(depthMat, outfile, row.names=FALSE)

qqmsg(status=0)
